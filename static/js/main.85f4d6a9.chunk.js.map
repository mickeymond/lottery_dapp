{"version":3,"sources":["components/Lottery.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Lottery","state","manager","account","accountBalance","players","contractBalance","winner","window","ethereum","on","accounts","location","reload","this","props","drizzle","contracts","web3","drizzleState","contractAddress","address","eth","getBalance","contractBalanceInWei","utils","fromWei","accountBalanceInWei","accountBalances","methods","call","getPlayers","setState","e","preventDefault","showLoader","enter","send","value","message","hideLoader","toastr","error","pickWinner","react_default","a","createElement","Container","textAlign","Segment","Header","as","Divider","Message","length","color","Button","primary","onClick","bid","bind","renderPickWinnerSegment","raised","positive","Component","Spinner","interval","setInterval","info","clearInterval","Loader","active","inline","size","App","loading","_this2","drizzle_react","Consumer","drizzleContext","initialized","Spinner_Spinner","components_Lottery","Boolean","hostname","match","options","Election","drizzleStore","generateStore","Drizzle","ReactDOM","render","Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85f4d6a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Divider, Container, Button, Header, Segment, Message } from 'semantic-ui-react';\nimport toastr from 'toastr/build/toastr.min.js';\n \nclass Lottery extends Component {\n\n    state = { manager: '', account: '', accountBalance: '', players: [], contractBalance: '', winner: '' };\n\n    async componentDidMount() {\n        if(window.ethereum) {\n            window.ethereum.on('accountsChanged', function (accounts) {\n                window.location.reload();\n            });\n        }\n\n        const { Lottery } = this.props.drizzle.contracts;\n        const { web3 } = this.props.drizzle;\n\n        const account = this.props.drizzleState.accounts[0];\n        const contractAddress = Lottery.address;\n        const contractBalanceInWei = await web3.eth.getBalance(contractAddress);\n        const contractBalance = web3.utils.fromWei(contractBalanceInWei);\n\n        const accountBalanceInWei = this.props.drizzleState.accountBalances[account];\n        const accountBalance = web3.utils.fromWei(accountBalanceInWei);\n\n        const manager = await Lottery.methods.manager().call();\n        const players = await Lottery.methods.getPlayers().call();\n        const winner = await Lottery.methods.winner().call();\n\n        this.setState({ account, accountBalance, manager, players, contractBalance, winner });\n    }\n\n    async bid(e) {\n        e.preventDefault();\n        this.props.showLoader();\n\n        const { Lottery } = this.props.drizzle.contracts;\n\n        try {\n            await Lottery.methods.enter().send({ value: 10000000000000000 });\n            window.location.reload();\n        } catch ({ message }) {\n            this.props.hideLoader();\n            toastr.error(message);\n        }\n    }\n\n    async pickWinner(e) {\n        e.preventDefault();\n        this.props.showLoader();\n\n        const { Lottery } = this.props.drizzle.contracts;\n\n        try {\n            await Lottery.methods.pickWinner().send();\n            window.location.reload();\n        } catch ({ message }) {\n            this.props.hideLoader();\n            toastr.error(message);\n        }\n    }\n    \n    render() {\n        return (\n            <Container textAlign=\"center\">\n                <Segment>\n                    <Header as=\"h1\">BLOCKCHAIN LOTTERY APPLICATION</Header>\n                </Segment>\n                <Divider />\n                <Message>\n                    <Message.Header>Lottery Manager</Message.Header>\n                    <p><strong>{this.state.manager}</strong></p>\n                </Message>\n                <Divider />\n                <Message>\n                    <Message.Header>Lottery Information</Message.Header>\n                    <p>\n                        There are <strong>{this.state.players.length}</strong> participants competing for <strong>{this.state.contractBalance}</strong> Ether.\n                    </p>\n                </Message>\n                <Divider />\n                <Message color=\"green\">\n                    <Message.Header>Latest Winner</Message.Header>\n                    <p><strong>{this.state.winner}</strong></p>\n                </Message>\n                <Divider />\n                <Message>\n                    <Message.Header>Place A Bid</Message.Header>\n                    <p>Each bid your place is worth 0.01 ether.</p>\n                </Message>\n                <Button primary onClick={this.bid.bind(this)}>Place A Bid</Button>\n                <Divider />\n                {this.renderPickWinnerSegment()}\n                <Divider />\n                <Segment raised>Your Account is: <strong>{this.state.account}</strong></Segment>\n                <Segment raised>Your Balance is: <strong>{this.state.accountBalance}</strong> ETH</Segment>\n            </Container>\n        );\n    }\n\n    renderPickWinnerSegment() {\n        if(this.state.manager === this.state.account) {\n            return (\n                <Container>\n                    <Message>\n                        <Message.Header>Are You Ready To Pick A Winner?</Message.Header>\n                    </Message>\n                    <Button positive onClick={this.pickWinner.bind(this)}>Pick A Winner</Button>\n                </Container>\n            );\n        }\n\n        return (\n            <Message>\n                <Message.Header>Please Contact Your Manager To Pick A Winner.</Message.Header>\n            </Message>\n        );\n    }\n}\n\nexport default Lottery;\n","import React, { Component } from 'react';\nimport { Loader } from 'semantic-ui-react';\nimport toastr from 'toastr/build/toastr.min.js';\n\nexport default class Spinner extends Component {\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            toastr.info('Please make sure your dapp browser is connected to the ropsten testnet and reload the page.');\n        }, 6000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <Loader\n                active\n                inline=\"centered\"\n                size=\"massive\"\n            />\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { DrizzleContext } from 'drizzle-react';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'toastr/build/toastr.min.css'\n\nimport Lottery from './components/Lottery'\nimport Spinner from './components/Spinner';\n\nclass App extends Component {\n  state = { loading: false };\n\n  showLoader() {\n    this.setState({ loading: true });\n  }\n\n  hideLoader() {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n      \n          if (!initialized || this.state.loading) {\n            return <Spinner />;\n          }\n    \n          return (\n            <Lottery\n              drizzle={drizzle}\n              drizzleState={drizzleState}\n              showLoader={this.showLoader.bind(this)}\n              hideLoader={this.hideLoader.bind(this)}\n            />\n          );\n        }}\n      </DrizzleContext.Consumer>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle, generateStore } from \"drizzle\";\nimport { DrizzleContext } from 'drizzle-react';\n\nimport Election from './contracts/Lottery.json'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    contracts: [\n        Election,\n    ]\n}\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nReactDOM.render(\n    <DrizzleContext.Provider drizzle={drizzle}>\n        <App />\n    </DrizzleContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}